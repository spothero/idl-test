// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package fortune

import (
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Animal int64
const (
  Animal_MONKEY Animal = 0
  Animal_OWL Animal = 1
  Animal_ANT Animal = 2
  Animal_LIZARD Animal = 3
  Animal_CAT Animal = 4
)

func (p Animal) String() string {
  switch p {
  case Animal_MONKEY: return "MONKEY"
  case Animal_OWL: return "OWL"
  case Animal_ANT: return "ANT"
  case Animal_LIZARD: return "LIZARD"
  case Animal_CAT: return "CAT"
  }
  return "<UNSET>"
}

func AnimalFromString(s string) (Animal, error) {
  switch s {
  case "MONKEY": return Animal_MONKEY, nil 
  case "OWL": return Animal_OWL, nil 
  case "ANT": return Animal_ANT, nil 
  case "LIZARD": return Animal_LIZARD, nil 
  case "CAT": return Animal_CAT, nil 
  }
  return Animal(0), fmt.Errorf("not a valid Animal string")
}


func AnimalPtr(v Animal) *Animal { return &v }

func (p Animal) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Animal) UnmarshalText(text []byte) error {
q, err := AnimalFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Animal) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Animal(v)
return nil
}

func (p * Animal) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ErrorCode
//  - Message
type UnfortunateException struct {
  ErrorCode int32 `thrift:"error_code,1" db:"error_code" json:"error_code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewUnfortunateException() *UnfortunateException {
  return &UnfortunateException{}
}


func (p *UnfortunateException) GetErrorCode() int32 {
  return p.ErrorCode
}

func (p *UnfortunateException) GetMessage() string {
  return p.Message
}
func (p *UnfortunateException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnfortunateException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorCode = v
}
  return nil
}

func (p *UnfortunateException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *UnfortunateException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnfortunateException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnfortunateException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *UnfortunateException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *UnfortunateException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnfortunateException(%+v)", *p)
}

func (p *UnfortunateException) Error() string {
  return p.String()
}

// Attributes:
//  - Name
//  - OptionalCar
//  - VehicleDescription
//  - FingerLengths
//  - SiblingAges
type FortuneRequest struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  OptionalCar *Car `thrift:"optional_car,2" db:"optional_car" json:"optional_car,omitempty"`
  VehicleDescription *VehicleDescription `thrift:"vehicle_description,3" db:"vehicle_description" json:"vehicle_description"`
  FingerLengths []int32 `thrift:"finger_lengths,4" db:"finger_lengths" json:"finger_lengths"`
  SiblingAges map[string]int32 `thrift:"sibling_ages,5" db:"sibling_ages" json:"sibling_ages"`
}

func NewFortuneRequest() *FortuneRequest {
  return &FortuneRequest{}
}


func (p *FortuneRequest) GetName() string {
  return p.Name
}
var FortuneRequest_OptionalCar_DEFAULT *Car
func (p *FortuneRequest) GetOptionalCar() *Car {
  if !p.IsSetOptionalCar() {
    return FortuneRequest_OptionalCar_DEFAULT
  }
return p.OptionalCar
}
var FortuneRequest_VehicleDescription_DEFAULT *VehicleDescription
func (p *FortuneRequest) GetVehicleDescription() *VehicleDescription {
  if !p.IsSetVehicleDescription() {
    return FortuneRequest_VehicleDescription_DEFAULT
  }
return p.VehicleDescription
}

func (p *FortuneRequest) GetFingerLengths() []int32 {
  return p.FingerLengths
}

func (p *FortuneRequest) GetSiblingAges() map[string]int32 {
  return p.SiblingAges
}
func (p *FortuneRequest) IsSetOptionalCar() bool {
  return p.OptionalCar != nil
}

func (p *FortuneRequest) IsSetVehicleDescription() bool {
  return p.VehicleDescription != nil
}

func (p *FortuneRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *FortuneRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *FortuneRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.OptionalCar = &Car{}
  if err := p.OptionalCar.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptionalCar), err)
  }
  return nil
}

func (p *FortuneRequest)  ReadField3(iprot thrift.TProtocol) error {
  p.VehicleDescription = &VehicleDescription{}
  if err := p.VehicleDescription.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VehicleDescription), err)
  }
  return nil
}

func (p *FortuneRequest)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.FingerLengths =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.FingerLengths = append(p.FingerLengths, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FortuneRequest)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int32, size)
  p.SiblingAges =  tMap
  for i := 0; i < size; i ++ {
var _key1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
var _val2 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val2 = v
}
    p.SiblingAges[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *FortuneRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FortuneRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FortuneRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *FortuneRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetOptionalCar() {
    if err := oprot.WriteFieldBegin("optional_car", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:optional_car: ", p), err) }
    if err := p.OptionalCar.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptionalCar), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:optional_car: ", p), err) }
  }
  return err
}

func (p *FortuneRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vehicle_description", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vehicle_description: ", p), err) }
  if err := p.VehicleDescription.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VehicleDescription), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vehicle_description: ", p), err) }
  return err
}

func (p *FortuneRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("finger_lengths", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:finger_lengths: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.FingerLengths)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FingerLengths {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:finger_lengths: ", p), err) }
  return err
}

func (p *FortuneRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sibling_ages", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sibling_ages: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.SiblingAges)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.SiblingAges {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sibling_ages: ", p), err) }
  return err
}

func (p *FortuneRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FortuneRequest(%+v)", *p)
}

// Attributes:
//  - CarNickname
//  - BikeFrameSizeCm
type VehicleDescription struct {
  CarNickname *string `thrift:"car_nickname,1" db:"car_nickname" json:"car_nickname,omitempty"`
  BikeFrameSizeCm *int32 `thrift:"bike_frame_size_cm,2" db:"bike_frame_size_cm" json:"bike_frame_size_cm,omitempty"`
}

func NewVehicleDescription() *VehicleDescription {
  return &VehicleDescription{}
}

var VehicleDescription_CarNickname_DEFAULT string
func (p *VehicleDescription) GetCarNickname() string {
  if !p.IsSetCarNickname() {
    return VehicleDescription_CarNickname_DEFAULT
  }
return *p.CarNickname
}
var VehicleDescription_BikeFrameSizeCm_DEFAULT int32
func (p *VehicleDescription) GetBikeFrameSizeCm() int32 {
  if !p.IsSetBikeFrameSizeCm() {
    return VehicleDescription_BikeFrameSizeCm_DEFAULT
  }
return *p.BikeFrameSizeCm
}
func (p *VehicleDescription) CountSetFieldsVehicleDescription() int {
  count := 0
  if (p.IsSetCarNickname()) {
    count++
  }
  if (p.IsSetBikeFrameSizeCm()) {
    count++
  }
  return count

}

func (p *VehicleDescription) IsSetCarNickname() bool {
  return p.CarNickname != nil
}

func (p *VehicleDescription) IsSetBikeFrameSizeCm() bool {
  return p.BikeFrameSizeCm != nil
}

func (p *VehicleDescription) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VehicleDescription)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CarNickname = &v
}
  return nil
}

func (p *VehicleDescription)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BikeFrameSizeCm = &v
}
  return nil
}

func (p *VehicleDescription) Write(oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsVehicleDescription(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("VehicleDescription"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VehicleDescription) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCarNickname() {
    if err := oprot.WriteFieldBegin("car_nickname", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:car_nickname: ", p), err) }
    if err := oprot.WriteString(string(*p.CarNickname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.car_nickname (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:car_nickname: ", p), err) }
  }
  return err
}

func (p *VehicleDescription) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetBikeFrameSizeCm() {
    if err := oprot.WriteFieldBegin("bike_frame_size_cm", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bike_frame_size_cm: ", p), err) }
    if err := oprot.WriteI32(int32(*p.BikeFrameSizeCm)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bike_frame_size_cm (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bike_frame_size_cm: ", p), err) }
  }
  return err
}

func (p *VehicleDescription) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VehicleDescription(%+v)", *p)
}

// Attributes:
//  - Make
//  - Model
//  - Year
type Car struct {
  Make string `thrift:"make,1" db:"make" json:"make"`
  Model string `thrift:"model,2" db:"model" json:"model"`
  Year int32 `thrift:"year,3" db:"year" json:"year"`
}

func NewCar() *Car {
  return &Car{}
}


func (p *Car) GetMake() string {
  return p.Make
}

func (p *Car) GetModel() string {
  return p.Model
}

func (p *Car) GetYear() int32 {
  return p.Year
}
func (p *Car) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Car)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Make = v
}
  return nil
}

func (p *Car)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Model = v
}
  return nil
}

func (p *Car)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Year = v
}
  return nil
}

func (p *Car) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Car"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Car) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("make", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:make: ", p), err) }
  if err := oprot.WriteString(string(p.Make)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.make (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:make: ", p), err) }
  return err
}

func (p *Car) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model: ", p), err) }
  if err := oprot.WriteString(string(p.Model)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.model (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model: ", p), err) }
  return err
}

func (p *Car) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("year", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:year: ", p), err) }
  if err := oprot.WriteI32(int32(p.Year)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.year (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:year: ", p), err) }
  return err
}

func (p *Car) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Car(%+v)", *p)
}

// Attributes:
//  - Fortune
//  - LuckyNumbers
//  - LuckYAnimal
type FortuneResponse struct {
  Fortune string `thrift:"fortune,1" db:"fortune" json:"fortune"`
  LuckyNumbers []int32 `thrift:"lucky_numbers,2" db:"lucky_numbers" json:"lucky_numbers"`
  LuckYAnimal Animal `thrift:"luckY_animal,3" db:"luckY_animal" json:"luckY_animal"`
}

func NewFortuneResponse() *FortuneResponse {
  return &FortuneResponse{}
}


func (p *FortuneResponse) GetFortune() string {
  return p.Fortune
}

func (p *FortuneResponse) GetLuckyNumbers() []int32 {
  return p.LuckyNumbers
}

func (p *FortuneResponse) GetLuckYAnimal() Animal {
  return p.LuckYAnimal
}
func (p *FortuneResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FortuneResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Fortune = v
}
  return nil
}

func (p *FortuneResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.LuckyNumbers =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.LuckyNumbers = append(p.LuckyNumbers, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FortuneResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Animal(v)
  p.LuckYAnimal = temp
}
  return nil
}

func (p *FortuneResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FortuneResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FortuneResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fortune", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fortune: ", p), err) }
  if err := oprot.WriteString(string(p.Fortune)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fortune (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fortune: ", p), err) }
  return err
}

func (p *FortuneResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lucky_numbers", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lucky_numbers: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.LuckyNumbers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LuckyNumbers {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lucky_numbers: ", p), err) }
  return err
}

func (p *FortuneResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("luckY_animal", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:luckY_animal: ", p), err) }
  if err := oprot.WriteI32(int32(p.LuckYAnimal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.luckY_animal (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:luckY_animal: ", p), err) }
  return err
}

func (p *FortuneResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FortuneResponse(%+v)", *p)
}

type FortuneTeller interface {
  // Parameters:
  //  - FortuneRequest
  GetFortune(ctx context.Context, fortune_request *FortuneRequest) (r *FortuneResponse, err error)
}

type FortuneTellerClient struct {
  c thrift.TClient
}

func NewFortuneTellerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FortuneTellerClient {
  return &FortuneTellerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewFortuneTellerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FortuneTellerClient {
  return &FortuneTellerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewFortuneTellerClient(c thrift.TClient) *FortuneTellerClient {
  return &FortuneTellerClient{
    c: c,
  }
}

func (p *FortuneTellerClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - FortuneRequest
func (p *FortuneTellerClient) GetFortune(ctx context.Context, fortune_request *FortuneRequest) (r *FortuneResponse, err error) {
  var _args4 FortuneTellerGetFortuneArgs
  _args4.FortuneRequest = fortune_request
  var _result5 FortuneTellerGetFortuneResult
  if err = p.Client_().Call(ctx, "GetFortune", &_args4, &_result5); err != nil {
    return
  }
  switch {
  case _result5.Unfortunate!= nil:
    return r, _result5.Unfortunate
  }

  return _result5.GetSuccess(), nil
}

type FortuneTellerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler FortuneTeller
}

func (p *FortuneTellerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *FortuneTellerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *FortuneTellerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewFortuneTellerProcessor(handler FortuneTeller) *FortuneTellerProcessor {

  self6 := &FortuneTellerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["GetFortune"] = &fortuneTellerProcessorGetFortune{handler:handler}
return self6
}

func (p *FortuneTellerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x7

}

type fortuneTellerProcessorGetFortune struct {
  handler FortuneTeller
}

func (p *fortuneTellerProcessorGetFortune) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FortuneTellerGetFortuneArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetFortune", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := FortuneTellerGetFortuneResult{}
var retval *FortuneResponse
  var err2 error
  if retval, err2 = p.handler.GetFortune(ctx, args.FortuneRequest); err2 != nil {
  switch v := err2.(type) {
    case *UnfortunateException:
  result.Unfortunate = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetFortune: " + err2.Error())
    oprot.WriteMessageBegin("GetFortune", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetFortune", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - FortuneRequest
type FortuneTellerGetFortuneArgs struct {
  FortuneRequest *FortuneRequest `thrift:"fortune_request,1" db:"fortune_request" json:"fortune_request"`
}

func NewFortuneTellerGetFortuneArgs() *FortuneTellerGetFortuneArgs {
  return &FortuneTellerGetFortuneArgs{}
}

var FortuneTellerGetFortuneArgs_FortuneRequest_DEFAULT *FortuneRequest
func (p *FortuneTellerGetFortuneArgs) GetFortuneRequest() *FortuneRequest {
  if !p.IsSetFortuneRequest() {
    return FortuneTellerGetFortuneArgs_FortuneRequest_DEFAULT
  }
return p.FortuneRequest
}
func (p *FortuneTellerGetFortuneArgs) IsSetFortuneRequest() bool {
  return p.FortuneRequest != nil
}

func (p *FortuneTellerGetFortuneArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FortuneTellerGetFortuneArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.FortuneRequest = &FortuneRequest{}
  if err := p.FortuneRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FortuneRequest), err)
  }
  return nil
}

func (p *FortuneTellerGetFortuneArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetFortune_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FortuneTellerGetFortuneArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fortune_request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fortune_request: ", p), err) }
  if err := p.FortuneRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FortuneRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fortune_request: ", p), err) }
  return err
}

func (p *FortuneTellerGetFortuneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FortuneTellerGetFortuneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Unfortunate
type FortuneTellerGetFortuneResult struct {
  Success *FortuneResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  Unfortunate *UnfortunateException `thrift:"unfortunate,1" db:"unfortunate" json:"unfortunate,omitempty"`
}

func NewFortuneTellerGetFortuneResult() *FortuneTellerGetFortuneResult {
  return &FortuneTellerGetFortuneResult{}
}

var FortuneTellerGetFortuneResult_Success_DEFAULT *FortuneResponse
func (p *FortuneTellerGetFortuneResult) GetSuccess() *FortuneResponse {
  if !p.IsSetSuccess() {
    return FortuneTellerGetFortuneResult_Success_DEFAULT
  }
return p.Success
}
var FortuneTellerGetFortuneResult_Unfortunate_DEFAULT *UnfortunateException
func (p *FortuneTellerGetFortuneResult) GetUnfortunate() *UnfortunateException {
  if !p.IsSetUnfortunate() {
    return FortuneTellerGetFortuneResult_Unfortunate_DEFAULT
  }
return p.Unfortunate
}
func (p *FortuneTellerGetFortuneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FortuneTellerGetFortuneResult) IsSetUnfortunate() bool {
  return p.Unfortunate != nil
}

func (p *FortuneTellerGetFortuneResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FortuneTellerGetFortuneResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &FortuneResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FortuneTellerGetFortuneResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Unfortunate = &UnfortunateException{}
  if err := p.Unfortunate.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Unfortunate), err)
  }
  return nil
}

func (p *FortuneTellerGetFortuneResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetFortune_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FortuneTellerGetFortuneResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FortuneTellerGetFortuneResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUnfortunate() {
    if err := oprot.WriteFieldBegin("unfortunate", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unfortunate: ", p), err) }
    if err := p.Unfortunate.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Unfortunate), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unfortunate: ", p), err) }
  }
  return err
}

func (p *FortuneTellerGetFortuneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FortuneTellerGetFortuneResult(%+v)", *p)
}


